<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="compiler.testParser" tests="1" skipped="0" failures="0" errors="0" timestamp="2024-03-22T17:23:16" hostname="dn029164.etu.univ-rennes1.fr" time="0.091">
  <properties/>
  <testcase name="testAllFilesParser()" classname="compiler.testParser" time="0.091"/>
  <system-out><![CDATA[Initial content is : 
fn add(a: int, b: int): int {
    a + b
}

fn sub(a: int, b: int): int {
    a - b
}

fn mul(a: int, b: int): int {
    a * b
}

fn alu(op: int, a: int, b: int): int {
    if (op > 1) {
        add(a, b)
    } else if (op > 0) {
        sub(a, b)
    } else {
        mul(a, b)
    }
}

Parsed !
Re-generated content is : 

fn add(a: int, b: int): int{
	a + b
}
fn sub(a: int, b: int): int{
	a - b
}
fn mul(a: int, b: int): int{
	a * b
}
fn alu(op: int, a: int, b: int): int{
	if (op > 1) {
		add (a, b)
	} else if (op > 0) {
		sub (a, b)
	} else {
		mul (a, b)
	}
}
Parsed !
Re-re-generated content is : 

fn add(a: int, b: int): int{
	a + b
}
fn sub(a: int, b: int): int{
	a - b
}
fn mul(a: int, b: int): int{
	a * b
}
fn alu(op: int, a: int, b: int): int{
	if (op > 1) {
		add (a, b)
	} else if (op > 0) {
		sub (a, b)
	} else {
		mul (a, b)
	}
}
Initial content is : 
fn main(): void {
	1 + 3 * 4;
}

Parsed !
Re-generated content is : 

fn main(): void{
	1 + 3 * 4;
}
Parsed !
Re-re-generated content is : 

fn main(): void{
	1 + 3 * 4;
}
Initial content is : 
fn max(a: int, b: int): int {
    if (a > b) {
        a
    } else {
        b
    }
}

Parsed !
Re-generated content is : 

fn max(a: int, b: int): int{
	if (a > b) {
		a
	} else {
		b
	}
}
Parsed !
Re-re-generated content is : 

fn max(a: int, b: int): int{
	if (a > b) {
		a
	} else {
		b
	}
}
Initial content is : 
fn add(a: int, b: int): int {
    a + b
}

Parsed !
Re-generated content is : 

fn add(a: int, b: int): int{
	a + b
}
Parsed !
Re-re-generated content is : 

fn add(a: int, b: int): int{
	a + b
}
Initial content is : 


fn testif(a: int) : void {
    if (a < 2) {
    a = a + 1
    } else if (a > 3) {
    a = a + 2
    }
}

Parsed !
Re-generated content is : 

fn testif(a: int): void{
	if (a < 2) {
		a = a + 1
	} else if (a > 3) {
		a = a + 2
	}
}
Parsed !
Re-re-generated content is : 

fn testif(a: int): void{
	if (a < 2) {
		a = a + 1
	} else if (a > 3) {
		a = a + 2
	}
}
Initial content is : 
fn factorial(n: int): int {
    let result = 1;
    while (n > 0) {
        result = result * n;
        n = n - 1;
    };
    result
}

Parsed !
Re-generated content is : 

fn factorial(n: int): int{
	let result = 1;while (n > 0) {
		result = result * n;n = n - 1;
	};
	result
}
Parsed !
Re-re-generated content is : 

fn factorial(n: int): int{
	let result = 1;while (n > 0) {
		result = result * n;n = n - 1;
	};
	result
}
Initial content is : 
fn main(): void {
    let a = 4
}

Parsed !
Re-generated content is : 

fn main(): void{
	let a = 4
}
Parsed !
Re-re-generated content is : 

fn main(): void{
	let a = 4
}
Initial content is : 
fn testwhile() : void {
    let x = 5;
    while (x > 0) {
        let y = true;
        x = x - 1;
    }
}

Parsed !
Re-generated content is : 

fn testwhile(): void{
	let x = 5;
	while (x > 0) {
		let y = true;x = x - 1;
	}
}
Parsed !
Re-re-generated content is : 

fn testwhile(): void{
	let x = 5;
	while (x > 0) {
		let y = true;x = x - 1;
	}
}
Initial content is : 
fn main(): void{
    let a = 4;
}

Parsed !
Re-generated content is : 

fn main(): void{
	let a = 4;
}
Parsed !
Re-re-generated content is : 

fn main(): void{
	let a = 4;
}
Initial content is : 
fn sum(n: int): int {
    let result = 0;
    for (i in 0..10) {
        result = result + i;
    };
    result
}

Parsed !
Re-generated content is : 

fn sum(n: int): int{
	let result = 0;for (i in 0..10){
		result = result + i;
	};
	result
}
Parsed !
Re-re-generated content is : 

fn sum(n: int): int{
	let result = 0;for (i in 0..10){
		result = result + i;
	};
	result
}
Initial content is : 
fn test01 () : void {
}

Parsed !
Re-generated content is : 

fn test01(): void{

}
Parsed !
Re-re-generated content is : 

fn test01(): void{

}
Initial content is : 
fn power(base: int, exponent: int): int {
    if (exponent > 0) {
        base * power(base, exponent - 1)
    } else {
        1
    }
}

Parsed !
Re-generated content is : 

fn power(base: int, exponent: int): int{
	if (exponent > 0) {
		base * power (base, exponent - 1)
	} else {
		1
	}
}
Parsed !
Re-re-generated content is : 

fn power(base: int, exponent: int): int{
	if (exponent > 0) {
		base * power (base, exponent - 1)
	} else {
		1
	}
}
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
